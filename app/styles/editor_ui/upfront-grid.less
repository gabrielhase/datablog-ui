
/* GRID WHITESPACE CONTROL */

/* prevent bottom margin of a snippet to add up with bottom margin of a row */
.upfront-snippet:last-child {
  margin-bottom: 0;
}


/* COLUMN DROPZONES */

.row {
  position: relative;
}

.upfront-empty-column {
  min-height: 120px !important; // important needed otherwise may overwritten
}

.upfront-new-column {
  font-family: @tipFontFamily;
  font-weight: 200;
/*  background: @grayLighter;*/
  color: #ccc;
  text-shadow: 0 1px 0 @white;
  font-size: 15px;
  text-align: center;
/*  width: 100%;*/
  border: 1px dashed #ccc;
  line-height: 120px;
/*  height: 120px;*/
  .border-radius(5px);
}

.upfront-dropzone {
  position: absolute;
  top: 0;
  bottom: 0;
  border: 1px dashed #ccc;
  .border-radius(5px);
}

.upfront-dropzone-active {
  color: #666;
  background: lighten(@green, 45%);
}


/* GRID UI CONTROL */

.upfront-grid-view {
  float: left;
  padding: 0;
  width: 500px;
  border-top: 1px solid #999;
  padding: 10px 10px 20px;
}

.upfront-grid-view-add {
  float: left;
  border: 1px dashed #999;
  width: 25px;
  height: 48px;
  text-align: center;
}

.upfront-grid-span-edit {
  position: relative;
  
  span {
    color: rgba(255, 255, 255, 0.5);
    font-weight: 200;
    font-size: 20px;
    display: inline-block;
    line-height: 50px;
    text-align: center;
    cursor: default;
    width: 100%;
  }
  
  &:hover {
    .grow-left,
    .grow-right,
    .remove-column { display: block; }
  }
  
  .remove-column,
  .grow-left,
  .grow-right {
    position: absolute;
    cursor: pointer;
    .opacity(50);
    &:hover { .opacity(100); }
  }
  
  .remove-column {
    top: -2px;
    right: 3px;
    font-size: 20px;
    font-weight: 200;
  }
  
  .grow-left {
    display: none;
    bottom: 0;
    left: 3px;
    width: 40%;
  }
  
  .grow-right {
    display: none;
    bottom: 0;
    right: 3px;
    width: 40%;
    text-align: right;
  }
  
  .add-right,
  .add-left {
    position: absolute;
    bottom: -20px;
  }
  .add-left { left: -10px; }
  .add-right { right: -10px; }
}
// use border-box and size columns by percent - easy but not nestable
[class*="upfront-grid-span"] {
  float: left;
  background: @blue;
  color: @white;
  border-left: 2px solid @panelBackground;
  border-right: 2px solid @panelBackground;
  min-height: 50px; // prevent collapsing columns
  .box-sizing(border-box);
  
  margin: 0 !important;
/*  margin-left: @gridGutterWidth;*/
}


/* GENERATE UI VIEW GRID */

.upfront-spanX (@index) when (@index > 0) {
  (~".upfront-grid-span@{index}") { .upfront-grid-span(@index); }
  .upfront-spanX(@index - 1);
}
.upfront-spanX (0) {}
  
.upfront-grid-span (@columns) {
  width: 100% * (@columns / 12);
}

// generate spans
.upfront-spanX (@gridColumns);

